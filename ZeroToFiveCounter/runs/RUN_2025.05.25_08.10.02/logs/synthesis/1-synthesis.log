
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/urgay/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v
Parsing SystemVerilog input from `/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v' to AST representation.
Storing AST representation for module `$abstract\ZeroToFiveCounter'.
Storing AST representation for module `$abstract\SevenSegmentDecoder'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\ZeroToFiveCounter'.
Generating RTLIL representation for module `\ZeroToFiveCounter'.

4.1. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\SevenSegmentDecoder'.
Generating RTLIL representation for module `\SevenSegmentDecoder'.
Note: Assuming pure combinatorial block at /openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:54.1-64.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.

4.3. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter
Used module:     \SevenSegmentDecoder

4.4. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter
Used module:     \SevenSegmentDecoder
Removing unused module `$abstract\SevenSegmentDecoder'.
Removing unused module `$abstract\ZeroToFiveCounter'.
Removed 2 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/ZeroToFiveCounter/runs/RUN_2025.05.25_08.10.02/tmp/synthesis/hierarchy.dot'.
Dumping module ZeroToFiveCounter to page 1.
Renaming module ZeroToFiveCounter to ZeroToFiveCounter.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter
Used module:     \SevenSegmentDecoder

7.2. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter
Used module:     \SevenSegmentDecoder
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:54$6 in module SevenSegmentDecoder.
Marked 3 switch rules as full_case in process $proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:33$1 in module SevenSegmentDecoder.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\SevenSegmentDecoder.$proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:33$1'.

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SevenSegmentDecoder.$proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:54$6'.
     1/1: $1\seg[6:0]
Creating decoders for process `\SevenSegmentDecoder.$proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:33$1'.
     1/2: $0\delay[24:0]
     2/2: $0\count[3:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\SevenSegmentDecoder.\seg' from process `\SevenSegmentDecoder.$proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:54$6'.

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SevenSegmentDecoder.\count' using process `\SevenSegmentDecoder.$proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:33$1'.
  created $adff cell `$procdff$24' with positive edge clock and positive level reset.
Creating register for signal `\SevenSegmentDecoder.\delay' using process `\SevenSegmentDecoder.$proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:33$1'.
  created $adff cell `$procdff$25' with positive edge clock and positive level reset.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\SevenSegmentDecoder.$proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:54$6'.
Removing empty process `SevenSegmentDecoder.$proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:54$6'.
Found and cleaned up 2 empty switches in `\SevenSegmentDecoder.$proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:33$1'.
Removing empty process `SevenSegmentDecoder.$proc$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:33$1'.
Cleaned up 3 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module ZeroToFiveCounter...
Checking module SevenSegmentDecoder...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.
Optimizing module SevenSegmentDecoder.
<suppressed ~1 debug messages>

21. Executing FLATTEN pass (flatten design).
Deleting now unused module SevenSegmentDecoder.
<suppressed ~1 debug messages>

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 0 unused cells and 9 unused wires.
<suppressed ~2 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\decoder.$procdff$24 ($adff) from module ZeroToFiveCounter (D = $flatten\decoder.$procmux$20_Y, Q = \decoder.count).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 4) from port B of cell ZeroToFiveCounter.$flatten\decoder.$procmux$13_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ZeroToFiveCounter.$flatten\decoder.$procmux$12_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ZeroToFiveCounter.$flatten\decoder.$procmux$11_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ZeroToFiveCounter.$flatten\decoder.$procmux$9_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ZeroToFiveCounter.$flatten\decoder.$eq$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:41$3 ($eq).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ZeroToFiveCounter:
  creating $macc model for $flatten\decoder.$add$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:44$4 ($add).
  creating $macc model for $flatten\decoder.$add$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:48$5 ($add).
  creating $alu model for $macc $flatten\decoder.$add$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:48$5.
  creating $alu model for $macc $flatten\decoder.$add$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:44$4.
  creating $alu cell for $flatten\decoder.$add$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:44$4: $auto$alumacc.cc:485:replace_alu$27
  creating $alu cell for $flatten\decoder.$add$/openlane/designs/ZeroToFiveCounter/src/ZeroToFiveCounter.v:48$5: $auto$alumacc.cc:485:replace_alu$30
  created 2 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
    Consolidated identical input bits for $pmux cell $flatten\decoder.$procmux$8:
      Old ports: A=7'1111111, B=42'100000011110010100100011000000110010010010, Y=\seg
      New ports: A=6'111111, B=36'100000111001010100011000001001001010, Y={ \seg [6:4] \seg [2:0] }
      New connections: \seg [3] = \seg [0]
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 1 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

37.10. Rerunning OPT passes. (Maybe there is more to do..)

37.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

37.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

37.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

37.14. Executing OPT_SHARE pass.

37.15. Executing OPT_DFF pass (perform DFF optimizations).

37.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

37.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

37.18. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$d843018565ef722782d28339c99ecf00b278e074\_90_pmux for cells of type $pmux.
Using template $paramod$c6885379b74fbbf6906b35106e386e521d86cbb2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~522 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.
<suppressed ~297 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
<suppressed ~129 debug messages>
Removed a total of 43 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 5 unused cells and 186 unused wires.
<suppressed ~6 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\ZeroToFiveCounter' to `<abc-temp-dir>/input.blif'..
Extracted 184 gates and 215 wires to a netlist network with 29 inputs and 36 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:              NAND cells:       17
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:               XOR cells:       24
ABC RESULTS:               AND cells:        4
ABC RESULTS:               NOR cells:        3
ABC RESULTS:            ANDNOT cells:       39
ABC RESULTS:                OR cells:       29
ABC RESULTS:        internal signals:      150
ABC RESULTS:           input signals:       29
ABC RESULTS:          output signals:       36
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 0 unused cells and 110 unused wires.
<suppressed ~1 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter

42.2. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter
Removed 0 unused modules.

43. Printing statistics.

=== ZeroToFiveCounter ===

   Number of wires:                133
   Number of wire bits:            175
   Number of public wires:           9
   Number of public wire bits:      51
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      39
     $_AND_                          4
     $_DFFE_PP0N_                    4
     $_DFF_PP0_                     25
     $_NAND_                        17
     $_NOR_                          3
     $_NOT_                          1
     $_ORNOT_                       10
     $_OR_                          29
     $_XNOR_                         3
     $_XOR_                         24

44. Executing CHECK pass (checking for obvious problems).
Checking module ZeroToFiveCounter...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/ZeroToFiveCounter/runs/RUN_2025.05.25_08.10.02/tmp/synthesis/post_techmap.dot'.
Dumping module ZeroToFiveCounter to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 0 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

49. Printing statistics.

=== ZeroToFiveCounter ===

   Number of wires:                130
   Number of wire bits:            166
   Number of public wires:           6
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                159
     $_ANDNOT_                      39
     $_AND_                          4
     $_DFFE_PP0N_                    4
     $_DFF_PP0_                     25
     $_NAND_                        17
     $_NOR_                          3
     $_NOT_                          1
     $_ORNOT_                       10
     $_OR_                          29
     $_XNOR_                         3
     $_XOR_                         24

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/urgay/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/urgay/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/urgay/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/urgay/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\ZeroToFiveCounter':
  mapped 29 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.

55. Printing statistics.

=== ZeroToFiveCounter ===

   Number of wires:                163
   Number of wire bits:            199
   Number of public wires:           6
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                192
     $_ANDNOT_                      39
     $_AND_                          4
     $_MUX_                          4
     $_NAND_                        17
     $_NOR_                          3
     $_NOT_                         30
     $_ORNOT_                       10
     $_OR_                          29
     $_XNOR_                         3
     $_XOR_                         24
     sky130_fd_sc_hd__dfrtp_2       29

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\ZeroToFiveCounter' to `/tmp/yosys-abc-hmGkND/input.blif'..
Extracted 163 gates and 193 wires to a netlist network with 30 inputs and 64 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-hmGkND/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-hmGkND/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-hmGkND/input.blif 
ABC: + read_lib -w /openlane/designs/ZeroToFiveCounter/runs/RUN_2025.05.25_08.10.02/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/ZeroToFiveCounter/runs/RUN_2025.05.25_08.10.02/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.07 sec
ABC: Memory =    9.54 MB. Time =     0.07 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/ZeroToFiveCounter/runs/RUN_2025.05.25_08.10.02/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/ZeroToFiveCounter/runs/RUN_2025.05.25_08.10.02/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (1404.29 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    126 ( 34.9 %)   Cap = 19.3 ff (  5.6 %)   Area =      930.89 ( 65.1 %)   Delay =  1737.23 ps  (  6.3 %)               
ABC: Path  0 --      10 : 0    5 pi                        A =   0.00  Df =  49.1  -27.2 ps  S =  74.0 ps  Cin =  0.0 ff  Cout =  14.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     101 : 4    6 sky130_fd_sc_hd__and4_2   A =  10.01  Df = 308.2  -49.6 ps  S =  99.2 ps  Cin =  1.5 ff  Cout =  12.6 ff  Cmax = 300.3 ff  G =  790  
ABC: Path  2 --     103 : 4    7 sky130_fd_sc_hd__and4_2   A =  10.01  Df = 590.8  -70.4 ps  S = 113.0 ps  Cin =  1.5 ff  Cout =  15.6 ff  Cmax = 300.3 ff  G =  985  
ABC: Path  3 --     109 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 962.4 -210.4 ps  S = 439.5 ps  Cin =  2.1 ff  Cout =  37.1 ff  Cmax = 130.0 ff  G = 1692  
ABC: Path  4 --     110 : 4    2 sky130_fd_sc_hd__nand4b_2 A =  15.01  Df =1153.4 -234.1 ps  S = 147.7 ps  Cin =  3.7 ff  Cout =   9.7 ff  Cmax = 200.5 ff  G =  246  
ABC: Path  5 --     113 : 4    1 sky130_fd_sc_hd__o31ai_2  A =  12.51  Df =1737.2 -398.5 ps  S = 679.2 ps  Cin =  4.4 ff  Cout =  33.4 ff  Cmax =  80.6 ff  G =  762  
ABC: Start-point = pi9 (\decoder.delay [0]).  End-point = po1 ($auto$rtlil.cc:2684:MuxGate$1046).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   30/   64  lat =    0  nd =   126  edge =    277  area =930.91  delay = 6.00  lev = 6
ABC: + write_blif /tmp/yosys-abc-hmGkND/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       32
ABC RESULTS:        internal signals:       99
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       64
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 0 unused cells and 197 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).
Add ZeroToFiveCounter/$auto$insbuf.cc:97:execute$1238: \seg [3] -> \seg [0]

62. Executing CHECK pass (checking for obvious problems).
Checking module ZeroToFiveCounter...
Found and reported 0 problems.

63. Printing statistics.

=== ZeroToFiveCounter ===

   Number of wires:                153
   Number of wire bits:            162
   Number of public wires:          33
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                160
     sky130_fd_sc_hd__a2111o_2       1
     sky130_fd_sc_hd__a21boi_2       2
     sky130_fd_sc_hd__a21o_2         2
     sky130_fd_sc_hd__a21oi_2        6
     sky130_fd_sc_hd__a31o_2         3
     sky130_fd_sc_hd__and2_2         4
     sky130_fd_sc_hd__and2b_2        4
     sky130_fd_sc_hd__and3_2         9
     sky130_fd_sc_hd__and4_2        13
     sky130_fd_sc_hd__buf_1         12
     sky130_fd_sc_hd__buf_2          1
     sky130_fd_sc_hd__conb_1         4
     sky130_fd_sc_hd__dfrtp_2       29
     sky130_fd_sc_hd__inv_2         32
     sky130_fd_sc_hd__nand2_2        6
     sky130_fd_sc_hd__nand4b_2       1
     sky130_fd_sc_hd__nor2_2        12
     sky130_fd_sc_hd__o21a_2         1
     sky130_fd_sc_hd__o21ba_2        2
     sky130_fd_sc_hd__o2bb2a_2       3
     sky130_fd_sc_hd__o31ai_2        1
     sky130_fd_sc_hd__or2_2          1
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__xnor2_2        4
     sky130_fd_sc_hd__xor2_2         5

   Chip area for module '\ZeroToFiveCounter': 1712.892800

64. Executing Verilog backend.
Dumping module `\ZeroToFiveCounter'.

65. Executing JSON backend.

End of script. Logfile hash: 3f585c840f, CPU: user 0.41s system 0.01s, MEM: 42.71 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 36% 2x abc (0 sec), 19% 2x read_liberty (0 sec), ...
